// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: konzu.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KonzuServiceClient is the client API for KonzuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KonzuServiceClient interface {
	CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OrderResponse, error)
	CheckOrderStatus(ctx context.Context, in *OrderStatusRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error)
}

type konzuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKonzuServiceClient(cc grpc.ClientConnInterface) KonzuServiceClient {
	return &konzuServiceClient{cc}
}

func (c *konzuServiceClient) CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/konzu.KonzuService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *konzuServiceClient) CheckOrderStatus(ctx context.Context, in *OrderStatusRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error) {
	out := new(OrderStatusResponse)
	err := c.cc.Invoke(ctx, "/konzu.KonzuService/CheckOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KonzuServiceServer is the server API for KonzuService service.
// All implementations must embed UnimplementedKonzuServiceServer
// for forward compatibility
type KonzuServiceServer interface {
	CreateOrder(context.Context, *Order) (*OrderResponse, error)
	CheckOrderStatus(context.Context, *OrderStatusRequest) (*OrderStatusResponse, error)
	mustEmbedUnimplementedKonzuServiceServer()
}

// UnimplementedKonzuServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKonzuServiceServer struct {
}

func (UnimplementedKonzuServiceServer) CreateOrder(context.Context, *Order) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedKonzuServiceServer) CheckOrderStatus(context.Context, *OrderStatusRequest) (*OrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOrderStatus not implemented")
}
func (UnimplementedKonzuServiceServer) mustEmbedUnimplementedKonzuServiceServer() {}

// UnsafeKonzuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KonzuServiceServer will
// result in compilation errors.
type UnsafeKonzuServiceServer interface {
	mustEmbedUnimplementedKonzuServiceServer()
}

func RegisterKonzuServiceServer(s grpc.ServiceRegistrar, srv KonzuServiceServer) {
	s.RegisterService(&KonzuService_ServiceDesc, srv)
}

func _KonzuService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KonzuServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konzu.KonzuService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KonzuServiceServer).CreateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _KonzuService_CheckOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KonzuServiceServer).CheckOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konzu.KonzuService/CheckOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KonzuServiceServer).CheckOrderStatus(ctx, req.(*OrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KonzuService_ServiceDesc is the grpc.ServiceDesc for KonzuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KonzuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "konzu.KonzuService",
	HandlerType: (*KonzuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _KonzuService_CreateOrder_Handler,
		},
		{
			MethodName: "CheckOrderStatus",
			Handler:    _KonzuService_CheckOrderStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "konzu.proto",
}
